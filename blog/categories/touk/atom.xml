<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: touk | Marcin bloguje]]></title>
  <link href="http://zygm0nt.github.com/blog/categories/touk/atom.xml" rel="self"/>
  <link href="http://zygm0nt.github.com/"/>
  <updated>2016-04-29T22:43:58+02:00</updated>
  <id>http://zygm0nt.github.com/</id>
  <author>
    <name><![CDATA[Marcin Cylke]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Super Confitura Man]]></title>
    <link href="http://zygm0nt.github.com/blog/2014/07/14/super-confitura-man/"/>
    <updated>2014-07-14T20:50:00+02:00</updated>
    <id>http://zygm0nt.github.com/blog/2014/07/14/super-confitura-man</id>
    <content type="html"><![CDATA[<h2>How Super Confitura Man came to be :)</h2>

<p>Recently at TouK we had a one-day hackathon. There was no main theme for
it, you just could post a project idea, gather people around it and hack
on that idea for a whole day - drinks and pizza included.</p>

<p>My main idea was to create something that could be fun to build and be
useful somehow to others. I’d figured out that since Confitura was just
around a corner I could make a game, that would be playable at TouK’s
booth at the conference venue. This idea seemed good enough to attract
Rafał Nowak <a href="https://twitter.com/RNowak3">@RNowak3</a> and Marcin Jasion
<a href="https://twitter.com/marcinjasion">@marcinjasion</a> - two TouK employees, that with me
formed a team for the hackathon.</p>

<p><img src="/assets/confitura-2014-01.jpg" alt="Confitura 01" /></p>

<!-- more -->


<p>The initial plan was to develop a simple mario-style game, with
preceduraly generated levels, random collectible items and enemies. One
of the ideas was to introduce Confitura Man as the main character, but
due to time constraints, this fall through. We’ve decided to just choose
a random available sprite for a character - hence the onion man :)</p>

<p><img src="/assets/confitura-2014-02.jpg" alt="Confitura 02" /></p>

<h2>How the game is played?</h2>

<p>Since we wanted to have a scoreboard and have unique users, we’ve
printed out QR codes. A person that would like to play the game could
pick up a QR code, show it against a camera attached to the play booth.
The start page scanned the QR code and launched the game with username
read from paper code.</p>

<p>The rest of the game was playable with gamepad or keyboard.</p>

<p><img src="/assets/confitura-2014-04.png" alt="Confitura game screen" /></p>

<h2>Technicalities</h2>

<p>Writing a game takes a lot of time and effort. We wanted to deliver, so
we’ve decided to spend some time in the days before the hackathon just
to bootstrap the technology stack of our enterprise.</p>

<p>We’ve decided that the game would be written in some Javascript based
engine, with Google Chrome as a web platform. There are a lot of HTML5
game engines - <a href="http://html5gameengine.com/">list of html5 game engines</a> and you could easily create a
game with each and every of them. We’ve decided to use <a href="http://phaser.io/">Phaser IO</a>
which handles a lot of difficult,  game-related stuff on its own. So, we
didn’t have to worry about physics, loading and storing assets,
animations, object collisions, controls input/output. Go see for
yourself, it is really nice and easy to use.</p>

<p>Scoreboard would be a rip-off from <a href="http://blog.gengo.com/jira-survivor/">JIRA Survivor</a>
with stats being served from some web server app. To make things harder,
the backend server was written in Clojure. With no experience in that
language in the team, it was a bit risky, but the tasks of the server
were trivial, so if all that clojure effort failed, it could be
rewritten in something we know.</p>

<h2>Statistics</h2>

<p>During the whole Confitura day there were 69 unique players (69 QR codes
were used), and 1237 games were played. The final score looked like
this:</p>

<ol>
<li>Barister Lingerie 158 - 1450 points</li>
<li>Boilerdang Custardbath 386 - 1060 points</li>
<li>Benadryl Clarytin 306 - 870 points</li>
</ol>


<p>And the obligatory scoreboard screenshot:</p>

<p><img src="/assets/confitura-2014-03.png" alt="Confitura 03" /></p>

<h2>Obstacles</h2>

<p>The game, being created in just one day, had to have problems :) It
wasn’t play tested enough, there were some rough edges. During the day
we had to make a few fixes:</p>

<ul>
<li>the server did not respect the highest score by specific user, it was just overwritting a user’s score with it’s latest one,</li>
<li>there was one feature not supported on keyboard, that was available on gamepad - turbo button</li>
<li>server was opening a database connection each time it got a request, so after around 5 minutes it would exhaust open file limit for MongoDB (backend database), this was easily fixed - thou the fix is a bit hackish :)</li>
</ul>


<p>These were easily identified and fixed.
Unfortunately there were issues that we were unable to fix while the
event was on:</p>

<ul>
<li>google chrome kept asking for the permission to use webcam - this was very annoying, and all the info found on the web did not work - <a href="http://stackoverflow.com/questions/16835421/how-to-allow-chrome-to-access-my-camera-on-localhost/16929608#16929608">StackOverflow thread</a></li>
<li>it was hard to start the game with QR code - either the codes were too small, or the lighting around that area was inappropriate - I think this
issue could be fixed by printing larger codes,</li>
</ul>


<h2>Technology evaluation</h2>

<p>All in all we were pretty happy with the chosen stack. Phaser was easy
to use and left us with just the fun parts of the game creation process.
Finding the right graphics with appropriate licensing was rather hard.
We didn’t have enough time to polish all the visual aspects of the game
before Confitura.</p>

<p>Writing a server in clojure was the most challenging part, with all the
new syntax and new libraries. There were tasks, trivial in java/scala,
but hard in Clojure - at least for a whimpy beginners :) Nevertheless
Clojure seems like a really handy tool and I’d like to dive deeper into
its ecosystem.</p>

<h2>Source code</h2>

<p>All of the sources for the game can be found here
<a href="https://github.com/TouK/confitura-man">TouK/confitura-man</a>.</p>

<p>The repository is split into two parts:</p>

<ul>
<li>game - HTML5 game</li>
<li>server - clojure based backend server</li>
</ul>


<p>To run the server you need to have a local MongoDB installation. Than in
server’s directory run:
<code>
$ lein ring server-headless
</code>
This will start a server on <code>http://localhost:3000</code></p>

<p>To run the game you need to install dependencies with bower and than
run
<code>
$ grunt
</code>
from game’s directory.</p>

<p>To launch the QR reading part of the game, you enter
<code>http://localhost:9000/start.html</code>. After scanning the code you’ll be
redirected to <code>http://localhost:9000/index.html</code> - and the game starts.</p>

<h2>Conclusion</h2>

<p>Summing up, it was a great experience creating the game. It was fun to
watch people playing the game. And even with all those glitches and
stupid graphics, there were people vigorously playing it, which was
awesome.</p>

<h2>Thanks to Rafał and Michał for great coding experience, and thanks to all the players of our stupid little game. If you’d like to ask me about anything - feel free to contact me by mail or twitter <a href="https://twitter.com/zygm0nt">@zygm0nt</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributed scans with HBase]]></title>
    <link href="http://zygm0nt.github.com/blog/2013/12/10/distributed-scans-with-hbase/"/>
    <updated>2013-12-10T21:26:00+01:00</updated>
    <id>http://zygm0nt.github.com/blog/2013/12/10/distributed-scans-with-hbase</id>
    <content type="html"><![CDATA[<p>HBase is by design a columnar store, that is optimized for random reads.
You just ask for a row using rowId as an identifier and you get your
data instantaneously.</p>

<p>Performing a scan on part or whole table is a completely different thing.
First of all, it is sequential. Meaning it is rather slow, because it
doesn't use all the RegionServers at the same time. It is implemented
that way to realize the contract of Scan command - which has to return
results sorted by key.</p>

<p>So, how to do this efficiently?</p>

<!-- more -->


<p>The usual way of getting data from HBase is with the help of its API,
mainly Scan objects. To accomplish the task I'll use just them. I'll
specify startRow and stopRow, so that each Scan request will be looking
through only part of the key space.</p>

<p>It is crucial to note, that this whole solution works because of key
sorting properties in HBase. So, HBase scans a table according to ascending key
values. Since keys are of String type, key with value "1" is smaller
than "2", because they are sorted lexicographicly. So, also key with value "12345" is smaller than "2". I've
leveraged this property so that I've partitioned my whole key space according to
the first character of the key. In my case keys contain only digits. So I
have 10 ranges:</p>

<ul>
<li>null-1</li>
<li>1-2</li>
<li>2-3</li>
<li>3-4</li>
<li>4-5</li>
<li>5-6</li>
<li>6-7</li>
<li>7-8</li>
<li>8-9</li>
<li>9-null</li>
</ul>


<p>The speedup comes from the fact, that each range resides in its own
partition. That's right, I've presplit the table to have 10 partitions.
This corresponds rather nicely with my cluster's setup, because I have
more than 10 RegionServers. So every partition should be on different
RegionServer. It will allow the code to do the requested scan operations
in parallel - giving me this exact performance boost.</p>

<p>How I've created the input table:</p>

<p><code></p>

<p>$ create 'tariff_changes', { NAME => 'cf', SPLITS_FILE => 'splits.txt', VERSIONS => 50, MAX_FILESIZE => 1073741824 }</p>

<p>$ alter 'tariff_changes', { NAME => 'cf', SPLITS_FILE => 'splits.txt', VERSIONS => 50, MAX_FILESIZE => 1073741824 }</p>

<p></code></p>

<p>Split file is just something along this lines:</p>

<p><code>
1
2
3
4
5
6
7
8
9
0
</code></p>

<p>This tells HBase what are the rowKeys starting and ending each of the
partitions.</p>

<p>Ok, so after this rather lengthy introduction, what the actual code
does? It just spins of a few threads - one for each partition - and runs
a Scan request tailored to that partitions key space. This way, I got a
10x speedup for this particular scan. The execution time went down from
30 minutes to 3 for my use case.</p>

<p>I've created an example implementation of this idea. You can find it on
GitHub:
<a href="https://github.com/zygm0nt/hbase-distributed-search">https://github.com/zygm0nt/hbase-distributed-search</a>.</p>

<p>Any ideas on how to speed things up even more with HBase?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple HBase ORM]]></title>
    <link href="http://zygm0nt.github.com/blog/2013/12/08/simple-hbase-orm/"/>
    <updated>2013-12-08T21:08:00+01:00</updated>
    <id>http://zygm0nt.github.com/blog/2013/12/08/simple-hbase-orm</id>
    <content type="html"><![CDATA[<p>When dealing with data stored in HBase, you are quick to come to a
conclusion, that it is extremaly inconvenient to reach to it
via HBase native API. It is very verbose and you always need to convert
between bytes and simple types - a pain.</p>

<p>While I was working on a project of mine, I thought, why not to easy
those pains and fetch real objects from HBase.</p>

<p>And that's how this simplistic, hackish ORM came to life. It is no match
for projects like <a href="https://github.com/impetus-opensource/Kundera">Kundera</a>
(a JPA compliant solution), or <a href="https://code.google.com/p/n-orm/">n-orm</a>. Nevertheless, it just suits my needs :)</p>

<!-- more -->


<p>Project sources are hosted on GitHub: <a href="https://github.com/zygm0nt/hbase-annotations">https://github.com/zygm0nt/hbase-annotations</a></p>

<p>To make use of this, you need to have an entity class with annotations:</p>

<ul>
<li>@Column - with argument specifying column family and column name, ie.
@Column("cf:column-name")</li>
<li>@Id - will store row key in this property,</li>
<li>and optionaly @Value - for Spring Expression Language, in case you
need to perform some extraction on the value.</li>
</ul>


<p><em>Annotations should be on setter methods.</em></p>

<p>Now you have your model annotated and ready to be fetched from HBase.</p>

<p>The actual work is done with a service class, that should extend class
<a href="https://github.com/zygm0nt/hbase-annotations/blob/master/src/main/java/pl/touk/hadoop/hbase/BaseHadoopInteraction.java">BaseHadoopInteraction</a> just as class
<a href="https://github.com/zygm0nt/hbase-annotations/blob/master/src/test/java/pl/touk/hadoop/hbase/SampleHBaseClient.java">SimpleHBaseClient</a> does.</p>

<p>Then it is possible to just call:</p>

<script src="https://gist.github.com/zygm0nt/7863407.js"></script>


<p>Note that there are more methods you can use on BaseHadoopInteraction.
You can also do:</p>

<ul>
<li>scan</li>
<li>scan with key ranges</li>
<li>delete</li>
</ul>


<p>What you won't get from this simple ORM is:</p>

<ul>
<li>automatic object updating,</li>
<li>nested objects,</li>
<li>saving to HBase - 'cause I didn't have a need for that,</li>
</ul>


<p>Hope you'll find this piece of code useful. If you see room for
improvements while staying in project's scope - please drop me a
message.</p>

<p>And if you are searching for a full-fledged ORM solution for interacting with HBase, just head
straight to Kundera project website :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recently at storm-users]]></title>
    <link href="http://zygm0nt.github.com/blog/2013/08/12/recently-at-storm-users/"/>
    <updated>2013-08-12T22:26:00+02:00</updated>
    <id>http://zygm0nt.github.com/blog/2013/08/12/recently-at-storm-users</id>
    <content type="html"><![CDATA[<p>I've been reading through storm-users Google Group recently. This
resolution was heavily inspired by Adam Kawa's post <a href="http://hakunamapdata.com/football-zero-apache-pig-hero-the-essence-from-hundreds-of-posts-from-apache-pig-user-mailing-list/">"Football zero, Apache Pig hero"</a>. Since I've encountered a lot of insightful and very interesting information I've decided to describe some of those in this post.</p>

<!-- more -->


<ul>
<li><p>nimbus will work in HA mode - There's a pull request open for it already... but some
recent work (distributing topology files via Bittorrent) will greatly
simplify the implementation. Once the Bittorrent work is done we'll look
at reworking the HA pull request. (<a href="https://github.com/nathanmarz/storm/pull/629">storm’s pull request</a>)</p></li>
<li><p>pig on storm - Pig on Trident would be a cool and welcome project. Join
and groupBy have very clear semantics there, as those concepts exist
directly in Trident. The extensions needed to Pig are the concept of
incremental, persistent state across batches (mirroring those concepts
in Trident). You can read a complete <a href="https://cwiki.apache.org/confluence/display/PIG/Pig+on+Storm+Proposal">proposal</a>.</p></li>
<li><p>implementing topologies in pure python with <a href="https://github.com/AirSage/Petrel">petrel</a> looks like this:</p></li>
</ul>


<blockquote><pre><code>class Bolt(storm.BasicBolt):
    def initialize(self, conf, context):
       ''' This method executed only once '''
        storm.log('initializing bolt')

    def process(self, tup):
       ''' This method executed every time a new tuple arrived '''       
       msg = tup.values[0]
       storm.log('Got tuple %s' %msg)

if __name__ == "__main__":
    Bolt().run()
</code></pre></blockquote>

<ul>
<li><p>Fliptop is happy with storm - see their presentation <a href="http://www.slideshare.net/robbiecheng/lesson-learned-of-twitter-storm">here</a></p></li>
<li><p>topology metrics in 0.9.0: The new metrics feature allows you to collect
arbitrarily custom metrics over fixed windows. Those metrics are
exported to a metrics stream that you can consume by implementing
<a href="https://github.com/nathanmarz/storm/blob/master/storm-core/src/jvm/backtype/storm/metric/api/IMetricsConsumer.java">IMetricsConsumer</a> and configure with <a href="https://github.com/nathanmarz/storm/blob/master/storm-core/src/jvm/backtype/storm/Config.java#L473">Config.java#L473</a>.
Use <strong>TopologyContext#registerMetric</strong> to register new metrics.</p></li>
<li><p>storm vs flume - some users' point of view: I use Storm and Flume and find that they are better at
different things - it really depends on your use case as to which one is
better suited. First and foremost, they were originally designed to do
different things: Flume is a reliable service for collecting,
aggregating, and moving large amounts of data from source to destination
(e.g. log data from many web servers to HDFS). Storm is more for
real-time computation (e.g. streaming analytics) where you analyse data
in flight and don't necessarily land it anywhere. Having said that,
Storm is also fault-tolerant and can write to external data stores (e.g.
HBase) and you can do real-time computation in Flume (using
interceptors)</p></li>
</ul>


<p>That's all for this day - however, I'll keep on reading through storm-users, so watch this space for more info on storm development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zookeeper + Curator = Distributed sync]]></title>
    <link href="http://zygm0nt.github.com/blog/2013/06/23/zookeeper-curator/"/>
    <updated>2013-06-23T22:20:00+02:00</updated>
    <id>http://zygm0nt.github.com/blog/2013/06/23/zookeeper-curator</id>
    <content type="html"><![CDATA[<p class="c8"><img height="300" src="http://zygm0nt.github.com/assets/2013-06-24-zookeeper-curator.jpg"></p>


<p class="c1"><span></span></p>


<p class="c8">
    <span>An application developed for one of my recent projects at TouK involved multiple servers. There was a requirement to ensure failover for the system&rsquo;s components. Since I had already a few separate components I didn&rsquo;t want to add more of that, and since there already was a Zookeeper ensemble running - required by one of the services, I&rsquo;ve decided to go that way with my solution.</span>
</p>


<h2 class="c8"><a name="h.v629433u6utf"></a><span>What is Zookeeper?</span></h2>


<p class="c8"><span>Just a crude distributed synchronization framework. However, it implements Paxos-style algorithms (</span><span
        class="c5"><a class="c0" href="http://en.wikipedia.org/wiki/Paxos_(computer_science)">http://en.wikipedia.org/wiki/Paxos_(computer_science)</a></span><span>) to ensure no split-brain scenarios would occur. This is quite an important feature, since I don&rsquo;t have to care about that kind of problems while using this app. You just need to create an ensemble of a couple of its instances - to ensure high availability. It is basically a virtual filesystem, with files, directories and stuff. One could ask why another filesystem? Well this one is a rather special one, especially for distributed systems. The reason why creating all the locking algorithms on top of Zookeeper is easy is its Ephemeral Nodes - which are just files that exist as long as connection for them exists. After it disconnects - such file disappears. </span>
</p>


<p class="c8"><span>With such paradigms in place it&rsquo;s fairly easy to create some high level algorithms for synchronization.</span>
</p>


<p class="c1"><span></span></p>


<p class="c8"><span>Having that in place, it</span><span>&nbsp;can</span><span>&nbsp;safely integrate multiple services ensuring loose coupling in a distributed way.</span>
</p>


<p class="c1"><span></span></p>


<h2 class="c8"><a name="h.ppqvt63vg53w"></a><span>Zookeeper from developer&rsquo;s POV</span>
</h2>


<p class="c8"><span>With all the base services for Zookeeper started, it seems there is nothing else, than just connect to it and start implementing necessary algorithms. Unfortunately, the API is quite basic and offers files and directories abstractions with the addition of different node type (file types) - ephemeral and sequence. It is also possible to watch a node for changes.</span>
</p>


<h2 class="c8"><a name="h.lgfultrxupbf"></a><span>Using bare Zookeeper is hard!</span></h2>


<p class="c8"><span>Creating connections is tedious - and there is lots of things to take care of. Handling an established connection is hard - when establishing connection to ensemble, it&rsquo;s necessary to negotiate a session also. During the whole process a number of exceptions can occur - these are &ldquo;recoverable&rdquo;
    exceptions, that can be gracefully handled and not break the connection.</span></p>


<p class="c1"><span></span></p>


<pre><code>    class="c8"&gt;&lt;span&gt;So, Zookeeper API is hard.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span&gt;Even if one is proficient with that API, then there come recipes. The reason for using Zookeeper is to be able to implement some more sophisticated algorithms on top of it. Unfortunately those aren&amp;rsquo;t trivial and it is again quite hard to implement them without bugs.&lt;/span&gt;
</code></pre>

<p></p><p class="c1"><span></span></p><p class="c8"><span>And since distributed systems are hard, why would anyone want another difficult to handle tool? </span>
</p><p class="c1"><span></span></p><h2 class="c8"><a name="h.8n72xils1l1f"></a><span>Enter Curator</span></h2>&lt;p</p>

<pre><code>    class="c8"&gt;&lt;span&gt;Happily, guys from Netflix implemented a nice abstraction for dealing with Zookeeper internals. They called it Curator and use it extensively in the company&amp;rsquo;s environment. Curator offers consistent API for Zookeeper&amp;rsquo;s functionality. It even implements a couple of recipes for distributed systems.&lt;/span&gt;
</code></pre>

<p></p><p class="c1"><span></span></p><h2 class="c8"><a name="h.k63iku7qitza"></a><span>File read/write</span></h2>&lt;p</p>

<pre><code>    class="c8"&gt;&lt;span&gt;The basic use of Zookeeper is as a distributed configuration repository. For this scenario I only need read/write capabilities, to be able to write and read files from the Zookeeper filesystem. This code snippet writes a sample json to a file on ZK filesystem.&lt;/span&gt;
</code></pre>

<p></p><p class="c1"><span></span></p><a href="#" name="fb1072a0c295459e23a47b12e8c09952a5ab3768"></a>&lt;a href="#"</p>

<pre><code>                                                                                                  name="0"&gt;&lt;/a&gt;
</code></pre>

<pre>
<code>
EnsurePath ensurePath = new EnsurePath(markerPath);
ensurePath.ensure(client.getZookeeperClient());
String json = “...”;
if (client.checkExists().forPath(statusFile(core)) != null)
     client.setData().forPath(statusFile(core), json.getBytes());
else
     client.create().forPath(statusFile(core), json.getBytes());

</code>
</pre>




<p class="c1"><span></span></p>


<h2 class="c8"><a name="h.ikl4cn73c5uw"></a><span>Distributed locking</span></h2>


<p class="c8"><span>Having multiple systems there may be a need of using an exclusive lock for some resource, or perhaps some big system requires it&rsquo;s components to synchronize based on locks. This &ldquo;recipe&rdquo;
    is an ideal match for those situations.</span></p>


<p class="c1"><span></span></p>


<pre><code>ref="#"
                                                                                    name="b0329bbbf14b79ffaba1139881914aea887ef6a3"&gt;&lt;/a&gt;
</code></pre>

<p><a href="#" name="1"></a></p>

<pre>
<code>

lock = new InterProcessSemaphoreMutex(client, lockPath);
lock.acquire(5, TimeUnit.MINUTES);
… do sth …
lock.release();

</code>
</pre>




<p class="c8"><span>&nbsp;(from </span><span class="c5"><a class="c0"
                                                                   href="https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/curator/LockingRemotely.java">https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/curator/LockingRemotely.java</a></span><span>)</span>
</p>


<p class="c1"><span></span></p>


<h2 class="c8"><a name="h.ck92kse5nam2"></a><span>Sevice Advertisement</span></h2>


<p>&lt;p</p>

<pre><code>    class="c8"&gt;&lt;span&gt;This is quite an interesting use case. With many small services on different servers it is not wise to exchange ip addresses and ports between them. When some of those services may go down, while other will try to replace them - the task gets even harder. &lt;/span&gt;
</code></pre>

<p></p><p class="c8"><span>That&rsquo;s why, with Zookeeper in place, it can be utilised as a registry of existing services.</span>
</p><p class="c1"><span></span></p><p class="c8"><span>If a service starts, it registers into the ServiceRegistry, offering basic information, like it&rsquo;s purpose, role, address, and port. </span>
</p><p class="c8"><span>Services that want to use a specific kind of service request an access to some instance. This way of configuring easily decouples services from their configuration.</span>
</p><p class="c1"><span></span></p><p class="c8"><span>Basically this scenario needs ? steps:</span></p><p class="c8"></p>

<pre><code>&lt;span&gt;1. Service starts and registers its presence (&lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c0"
                                                                               href="https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/curator/WorkerAdvertiser.java#L44"&gt;https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/curator/WorkerAdvertiser.java#L44&lt;/a&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
</code></pre>

<p></p><p class="c1"><span></span></p><a href="#" name="1c67229d451cd2d82dddaf1fb12af1aed4a8ecb0"></a></p>

<pre>
<code>

ServiceDiscovery<WorkerMetadata> discovery = getDiscovery();
            discovery.start();
            ServiceInstance si = getInstance();
            log.info(si);
            discovery.registerService(si);


</code>
</pre>


<p class="c1"><span></span></p>


<p class="c8"><span>2. Another service - on another host or in another JVM on the same machine tries to discover who is implementing the service (</span><span
        class="c5"><a class="c0"
                      href="https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/curator/WorkerFinder.java#L50">https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/curator/WorkerFinder.java#L50</a></span><span>)</span><span>:</span>
</p>


<p class="c1"><span></span></p>


<p><a href="#" name="0e430a074ab36c8eea3f84fae3d0cffb400dd281"></a>&lt;a href="#"</p>

<pre><code>                                                                                                  name="3"&gt;&lt;/a&gt;
</code></pre>

<pre>
<code>
instances = discovery.queryForInstances(serviceName);
</code>
</pre>




<p class="c8"><span>The whole concept here is ridiculously simple - the service advertising its presence just stores a file with its whereabouts. The service that is looking for service providers just look into specific directory and read stored definitions.</span>
</p>


<p class="c1"><span></span></p>


<p class="c8"><span>In my example, the structure advertised by services looks like this (+ some getters and constructor - the rest is here: </span><span
        class="c5"><a class="c0"
                      href="https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/model/WorkerMetadata.java">https://github.com/zygm0nt/curator-playground/blob/master/src/main/java/pl/touk/model/WorkerMetadata.java</a></span><span>):</span>
</p>


<p class="c1"><span></span></p>


<p><a href="#" name="c0131478bfab43e60b5e077f3170a172a909d199"></a></p>

<pre>
<code>

public final class WorkerMetadata {
    private final UUID workerId;
    private final String listenAddress;
    private final int listenPort;
}

</code>
</pre>


<p class="c1"><span></span></p>


<h2 class="c8"><a name="h.qvt6wa2m15sm"></a><span>Source code</span></h2>


<p>&lt;p</p>

<pre><code>    class="c8"&gt;&lt;span&gt;The above recipes are available in Curator library (&lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c0"
                                                                                                    href="http://curator.incubator.apache.org/"&gt;http://curator.incubator.apache.org/&lt;/a&gt;&lt;/span&gt;&lt;span&gt;). Recipes&amp;rsquo;
usage examples are in my github repo at &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c0"
                                                                   href="https://github.com/zygm0nt/curator-playground"&gt;https://github.com/zygm0nt/curator-playground&lt;/a&gt;&lt;/span&gt;
</code></pre>

<p></p><p class="c1"><span></span></p><h2 class="c8"><a name="h.o1zkosbrwpah"></a><span>Conclusion</span></h2>&lt;p</p>

<pre><code>    class="c8"&gt;&lt;span&gt;If you&amp;rsquo;re in need of a reliable platform for exchanging data and managing synchronization, and you need to do it in a distributed fashion - just choose Zookeeper. Then add Curator for the ease of using it. Enjoy!&lt;/span&gt;
</code></pre>

<p></p><p class="c1"><span></span></p><p class="c1"><span></span></p></p>

<hr><p class="c1"><span></span></p>


<ol class="c13" start="1">
    <li class="c7"><span>image comes from: </span><span class="c5"><a class="c0"
                                                                      href="http://www.flickr.com/photos/jfgallery/2993361148">http://www.flickr.com/photos/jfgallery/2993361148</a></span>
    </li>
    <li class="c7"><span>all source code fragments taken from this repo: </span><span class="c5"><a class="c0"
                                                                                                    href="https://github.com/zygm0nt/curator-playground">https://github.com/zygm0nt/curator-playground</a></span>
    </li>
</ol>

]]></content>
  </entry>
  
</feed>
