.blog-post-image {
    width: 400px; /* Makes the image span the full width of the container */
    height: auto; /* Maintains the imageâ€™s aspect ratio */
    max-width: 100%;
    display: block;
    margin: 0 auto 20px;
    border-radius: 8px; /* Optional: adds rounded corners */
    object-fit: cover; /* Ensures the image covers the area without distortion */
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); /* Optional: subtle shadow for depth */
}

.content-with-toc a[href^="http"]::after,
.content-with-toc a[href^="https://"]::after
{
  content: "";
  width: 11px;
  height: 11px;
  margin-left: 4px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  display: inline-block;
}

nav#TableOfContents {

    border: 3px solid black;
    padding: 1px;
    padding-bottom: 15px;
    padding-top: 15px;
    padding-right: 5px;
    width: 180px;
    background-color: #fff;
    position: -webkit-sticky;
    position: sticky;
    top: 0;
}


 class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        x = []
        s = set(words)
        for word in words:
            s.remove(word)
            y = list(map(lambda t: word in t, s))
            print(y)
            if any(y):
                x.append(word)
        return list(set(x))
        